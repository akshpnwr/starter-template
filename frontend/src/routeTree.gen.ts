/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as PublicImport } from './routes/_public'
import { Route as AuthImport } from './routes/_auth'
import { Route as PublicIndexImport } from './routes/_public/index'
import { Route as AuthDashboardImport } from './routes/_auth/dashboard'
import { Route as AuthUsersIndexImport } from './routes/_auth/users/index'
import { Route as PublicAuthRegisterImport } from './routes/_public/auth/register'
import { Route as PublicAuthPhoneImport } from './routes/_public/auth/phone'
import { Route as PublicAuthLoginImport } from './routes/_public/auth/login'
import { Route as AuthUsersAddImport } from './routes/_auth/users/add'

// Create/Update Routes

const PublicRoute = PublicImport.update({
  id: '/_public',
  getParentRoute: () => rootRoute,
} as any)

const AuthRoute = AuthImport.update({
  id: '/_auth',
  getParentRoute: () => rootRoute,
} as any)

const PublicIndexRoute = PublicIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => PublicRoute,
} as any)

const AuthDashboardRoute = AuthDashboardImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => AuthRoute,
} as any)

const AuthUsersIndexRoute = AuthUsersIndexImport.update({
  id: '/users/',
  path: '/users/',
  getParentRoute: () => AuthRoute,
} as any)

const PublicAuthRegisterRoute = PublicAuthRegisterImport.update({
  id: '/auth/register',
  path: '/auth/register',
  getParentRoute: () => PublicRoute,
} as any)

const PublicAuthPhoneRoute = PublicAuthPhoneImport.update({
  id: '/auth/phone',
  path: '/auth/phone',
  getParentRoute: () => PublicRoute,
} as any)

const PublicAuthLoginRoute = PublicAuthLoginImport.update({
  id: '/auth/login',
  path: '/auth/login',
  getParentRoute: () => PublicRoute,
} as any)

const AuthUsersAddRoute = AuthUsersAddImport.update({
  id: '/users/add',
  path: '/users/add',
  getParentRoute: () => AuthRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthImport
      parentRoute: typeof rootRoute
    }
    '/_public': {
      id: '/_public'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PublicImport
      parentRoute: typeof rootRoute
    }
    '/_auth/dashboard': {
      id: '/_auth/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof AuthDashboardImport
      parentRoute: typeof AuthImport
    }
    '/_public/': {
      id: '/_public/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof PublicIndexImport
      parentRoute: typeof PublicImport
    }
    '/_auth/users/add': {
      id: '/_auth/users/add'
      path: '/users/add'
      fullPath: '/users/add'
      preLoaderRoute: typeof AuthUsersAddImport
      parentRoute: typeof AuthImport
    }
    '/_public/auth/login': {
      id: '/_public/auth/login'
      path: '/auth/login'
      fullPath: '/auth/login'
      preLoaderRoute: typeof PublicAuthLoginImport
      parentRoute: typeof PublicImport
    }
    '/_public/auth/phone': {
      id: '/_public/auth/phone'
      path: '/auth/phone'
      fullPath: '/auth/phone'
      preLoaderRoute: typeof PublicAuthPhoneImport
      parentRoute: typeof PublicImport
    }
    '/_public/auth/register': {
      id: '/_public/auth/register'
      path: '/auth/register'
      fullPath: '/auth/register'
      preLoaderRoute: typeof PublicAuthRegisterImport
      parentRoute: typeof PublicImport
    }
    '/_auth/users/': {
      id: '/_auth/users/'
      path: '/users'
      fullPath: '/users'
      preLoaderRoute: typeof AuthUsersIndexImport
      parentRoute: typeof AuthImport
    }
  }
}

// Create and export the route tree

interface AuthRouteChildren {
  AuthDashboardRoute: typeof AuthDashboardRoute
  AuthUsersAddRoute: typeof AuthUsersAddRoute
  AuthUsersIndexRoute: typeof AuthUsersIndexRoute
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthDashboardRoute: AuthDashboardRoute,
  AuthUsersAddRoute: AuthUsersAddRoute,
  AuthUsersIndexRoute: AuthUsersIndexRoute,
}

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren)

interface PublicRouteChildren {
  PublicIndexRoute: typeof PublicIndexRoute
  PublicAuthLoginRoute: typeof PublicAuthLoginRoute
  PublicAuthPhoneRoute: typeof PublicAuthPhoneRoute
  PublicAuthRegisterRoute: typeof PublicAuthRegisterRoute
}

const PublicRouteChildren: PublicRouteChildren = {
  PublicIndexRoute: PublicIndexRoute,
  PublicAuthLoginRoute: PublicAuthLoginRoute,
  PublicAuthPhoneRoute: PublicAuthPhoneRoute,
  PublicAuthRegisterRoute: PublicAuthRegisterRoute,
}

const PublicRouteWithChildren =
  PublicRoute._addFileChildren(PublicRouteChildren)

export interface FileRoutesByFullPath {
  '': typeof PublicRouteWithChildren
  '/dashboard': typeof AuthDashboardRoute
  '/': typeof PublicIndexRoute
  '/users/add': typeof AuthUsersAddRoute
  '/auth/login': typeof PublicAuthLoginRoute
  '/auth/phone': typeof PublicAuthPhoneRoute
  '/auth/register': typeof PublicAuthRegisterRoute
  '/users': typeof AuthUsersIndexRoute
}

export interface FileRoutesByTo {
  '': typeof AuthRouteWithChildren
  '/dashboard': typeof AuthDashboardRoute
  '/': typeof PublicIndexRoute
  '/users/add': typeof AuthUsersAddRoute
  '/auth/login': typeof PublicAuthLoginRoute
  '/auth/phone': typeof PublicAuthPhoneRoute
  '/auth/register': typeof PublicAuthRegisterRoute
  '/users': typeof AuthUsersIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_auth': typeof AuthRouteWithChildren
  '/_public': typeof PublicRouteWithChildren
  '/_auth/dashboard': typeof AuthDashboardRoute
  '/_public/': typeof PublicIndexRoute
  '/_auth/users/add': typeof AuthUsersAddRoute
  '/_public/auth/login': typeof PublicAuthLoginRoute
  '/_public/auth/phone': typeof PublicAuthPhoneRoute
  '/_public/auth/register': typeof PublicAuthRegisterRoute
  '/_auth/users/': typeof AuthUsersIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | ''
    | '/dashboard'
    | '/'
    | '/users/add'
    | '/auth/login'
    | '/auth/phone'
    | '/auth/register'
    | '/users'
  fileRoutesByTo: FileRoutesByTo
  to:
    | ''
    | '/dashboard'
    | '/'
    | '/users/add'
    | '/auth/login'
    | '/auth/phone'
    | '/auth/register'
    | '/users'
  id:
    | '__root__'
    | '/_auth'
    | '/_public'
    | '/_auth/dashboard'
    | '/_public/'
    | '/_auth/users/add'
    | '/_public/auth/login'
    | '/_public/auth/phone'
    | '/_public/auth/register'
    | '/_auth/users/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  AuthRoute: typeof AuthRouteWithChildren
  PublicRoute: typeof PublicRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  AuthRoute: AuthRouteWithChildren,
  PublicRoute: PublicRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_auth",
        "/_public"
      ]
    },
    "/_auth": {
      "filePath": "_auth.tsx",
      "children": [
        "/_auth/dashboard",
        "/_auth/users/add",
        "/_auth/users/"
      ]
    },
    "/_public": {
      "filePath": "_public.tsx",
      "children": [
        "/_public/",
        "/_public/auth/login",
        "/_public/auth/phone",
        "/_public/auth/register"
      ]
    },
    "/_auth/dashboard": {
      "filePath": "_auth/dashboard.tsx",
      "parent": "/_auth"
    },
    "/_public/": {
      "filePath": "_public/index.tsx",
      "parent": "/_public"
    },
    "/_auth/users/add": {
      "filePath": "_auth/users/add.tsx",
      "parent": "/_auth"
    },
    "/_public/auth/login": {
      "filePath": "_public/auth/login.tsx",
      "parent": "/_public"
    },
    "/_public/auth/phone": {
      "filePath": "_public/auth/phone.tsx",
      "parent": "/_public"
    },
    "/_public/auth/register": {
      "filePath": "_public/auth/register.tsx",
      "parent": "/_public"
    },
    "/_auth/users/": {
      "filePath": "_auth/users/index.tsx",
      "parent": "/_auth"
    }
  }
}
ROUTE_MANIFEST_END */
